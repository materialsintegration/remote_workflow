..
.. DPF計算環境利用frontISTR計算
..

WFAS7利用_FrontISTR実行_検証版_外部計算_DPFワークフロー
========================================================

概要
------

本ワークフローはWFAS [#what_is_wfas]_ で行うクリープ性能試験で利用するFrontISTR解析ワークフローを外部計算機資源のうちDPF計算環境の利用による計算を使って実行するワークフローである。
本ワークフローはWFAS7利用_FrontISTR実行_検証版を元に作られているため、以下の説明は省略する。

* ワークフローの説明
* 入力データのフォーマット
* 各ツールの説明
* 計算結果の確認
* 計算結果のファイル

詳細はWFAS7利用_FrontISTR実行_検証版の使い方を参照すること。
ここでは外部計算機利用のための説明を行う。

.. figure:: ../figures/dpfc_frontistr/W110000000724.svg
   :align: center
   :scale: 70%
   :name: dpfc_frontistr_workflow

   WFAS7利用_FrontISTR実行_検証版_外部計算_DPFワークフロー

.. raw:: latex

   \newpage

.. note::
    本ワークフローはWFASから利用することを前提条件としたワークフローを元にしているため、入力パラメータが特殊である。

.. note::
    外部計算機としてDPF計算環境を利用するため、その手続きと準備が必要となる。

.. [#what_is_wfas] WFASはSIP-MIラボで開発された溶接シミュレーションソフトウェアによる解析をWEB GUIから行えるようにしたアプリケーションである。

.. raw:: latex

   \newpage

外部計算機利用の仕組み
-----------------------------------
本ワークフローで使う外部計算機利用はMIntシステムとWebAPIを利用したポーリングシステムを利用して各モジュールの計算をMIntシステムおよびNIMSの所外の計算機を利用して行うものである。
以下この方式をWebAPI方式とする。
WebAPI方式での外部計算機利用の実行イメージを( :numref:`WebAPI方式の流れ` )に示す。

.. _WebAPI方式の流れ:

.. mermaid::
   :caption: ポーリングシステムの流れ
   :align: center

   sequenceDiagram;

   participant D as ユーザープログラム<BR>（ユーザー側）
   participant C as ポーリングシステム<BR>（ユーザー側）
   participant B as WebAPI<BR>(NIMS内)
   participant A as MIntシステム<BR>（NIMS内）

   C->>B:計算問い合わせ
     alt 計算が存在しない
       B->>C:登録無し
       C -->> C:計算問い合わせ継続
     else 計算が存在する
       A->>B:計算登録
       C->>B:計算問い合わせ
       B->>C:登録有り
       alt 計算実行
         C->>B:情報取得要求
         B->>C:パラメータ送付、コマンドライン送付
         C->>D:プログラム実行
         alt プログラム実行
           D -->> D:プログラム実行中
         else プログラム終了
           D -->> C:プログラム終了
         end
         C->>B:計算終了通知
       else no seq
       end
       B->>C:計算結果の返却要求
       C->>B:計算結果の返却応答
       B->>A:ジョブの終了要求
     end

.. raw:: latex

   \newpage

外部計算機利用予測モジュールの処理
---------------------------------

外部計算機利用予測モジュール（本ワークフローでは全ての予測モジュールが対象）内で外部計算機側の処理が実行されるまでの流れを下記に示す。

.. mermaid::
   :caption: WebAPI方式でのコマンドの流れ
   :align: center

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as WebAPI
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : MInt内
     Note over D,E : 外部計算機内

     A->>B:モジュールが実行
     B->>C:（Ａ）がhttps経由でAPI発行
     D->>C:（Ｃ）がhttps経由でAPI発行
     D->>E:（Ｃ）が実行

* モジュール

    + MIntのワークフローシステムによって実行されるモジュール
    + ワークフロー作成者が用意する。
    + プログラム（Ａ）を実行する
* プログラム（Ａ）

    + モジュールによって実行されるプログラム。モジュールごとに任意の名前で用意する。
    + ワークフロー作成者が用意する。
    + モジュール固有の前処理を行う。
    + モジュール内で**misrc_distributed_computing_assist_api/debug/mi-system-side/mi-system-wf.py** を実行する。

        - WebAPIへ計算の情報が登録される。
        - 以降このプログラムが外部計算機資源側（以下の（Ｃ））とAPIを介して計算に必要な処理を行う。
* WebAPI (このプログラムがMIntシステムと外部計算機との通信を中継する。)

    + 外部計算の準備を行う。

        - 送受信するファイルはパラメータとしてあらかじめ設定しておく。
    + WebAPI経由で（Ｃ）からのアクセスを受け付ける
    + （Ａ）から計算の情報登録が無い限り、（Ｃ）からアクセスがあっても計算は始まらない。
    + ワークフローを実行したユーザーのトークンと（Ｃ）からのトークンが合致しないと（Ｃ）は適正な通信相手とならない。
* プログラム（Ｃ）

    + ポーリングプログラムである。
    + 外部計算機資源（ユーザー）側で用意する。
    + **misrc_distributed_computing_assist_api/debug/remote-side/mi-system-remote.py** を実行する。
    + 外部計算機上で実行するプログラム名は、このプログラム経由でMIntシステムから受信され、このプログラムが実行する。
    + 認証情報はこのプログラム（Ｃ）が使用する。認証情報が無いとWebAPIにアクセスできない。詳細は\ :numref:`prepair_using_workflow`\ の\ :ref:`prepair_using_workflow` で説明する。
* プログラム（Ｄ）

    + （Ｃ）から実行される外部計算用スクリプト。
    + 外部計算機資源（ユーザー）側で用意する。
    + 名前は任意。（プログラム（Ｃ）経由で伝えられるため、あらかじめMIntシステム側に設定が必要）

処理の流れ
^^^^^^^^^^^^

ラン実行によるモジュールの処理の流れは以下のとおりとなる。

* クライアント（DPF）でポーリング開始
* MIntシステム（予測モジュール）からAPIサーバーへ外部計算用計算の登録
* クライアントでAPIサーバーから外部計算用計算情報の受信と詳細取得
* クライアントでAPIサーバーからパラメータの受信
* クライアントでFronISTRの処理
* クライアントでAPIサーバーへFrontISTR処理の終了通知と結果の送信
* MIntシステム（予測モジュール）でAPIサーバーから結果の受信

.. _prepair_using_workflow:

利用の準備
-------------------

本ワークフローはFrontISTR計算をDPFが用意する計算機群を使用して計算を行うが、MIntチームが用意したアカウントを利用する場合、ワークフローも既存のものが使用可能である。
DPFに専用のアカウントが必要な場合は以下の準備が必要となり、ワークフローも専用のものを用意する必要がある。

* DPF計算環境を利用するためのユーザーおよび資源

    - DPFの資料にしたがって準備する。
* DPF計算環境でユーザー個別のFrontISTRのインストール

    - インストールはDPFの資料にしたがうが、FrontISTRのインストール資材はMIntシステムチームから入手する。

* DPF計算環境で外部計算機資源をWebAPIで利用するための資材の展開

    - こちらは通常の外部計算機資源の利用マニュアルに従って入手、展開する。

* 利用申請

    - APIトークンの外部計算機利用ワークフロー利用申請

* 認証情報

    - API認証情報の取得

* 環境構築

    - 利用者サイドの計算機および計算機資源。

* ポーリングの開始

DPFを利用する場合の注意事項
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

DPFにユーザー専用のアカウントを作って利用する場合、以下の点に注意すること。

* WebAPIのポート番号：50443で通信ができないので、portパラメータで443を利用する。
* 認証局ファイル：WebAPI通信の際、proxy経由に必要な認証局ファイルの指定が必要である。no_authパラメータで指定する。
* 作業ディレクトリの指定：通常、/tmpを使うが、DPFでは/home/<ユーザーディレクトリ>/<作業ディレクトリ名>を用意し、calc_baseパラメータで指定する。

.. note::
   認証局ファイルはICT室から入手できるnims_proxy.cerを利用する。

利用申請
^^^^^^^^^^

WebAPI方式を利用したポーリング実行に必要な利用申請を行う。
このタイプのワークフローはユーザー専用となるため、その手続きが必要である。
申請後、専用ワークフローのワークフローIDが返送されるので、実行にはそのワークフローIDを利用する。

認証情報の準備
^^^^^^^^^^^^^^

MInt側担当者と打ち合わせて下記の情報を用意する。

* ホスト情報

    + MInt側でAPIの発行者を識別するための文字列。利用者が持つドメインとホスト名を使うのが一般的であるが、
同じである必要は無い。
* APIトークン

    + MIntのAPI認証システムを使用するためのトークン。すでにMIntシステム利用申請を済ませ、ログインIDとパス
ワード入手済であれば、MIntシステムログイン後、ユーザープロファイル管理システムメニューで表示される、「APIトークン」を使用する。
    + ユーザーの環境でポーリングスクリプトを動作させるときに必要であるが、後述のログイン方式を利用する場>合はトークン自体は必要ない。
* MIntのURL

    + MIntのURL(エンドポイントは不要)を、MInt運用チームに問い合わせておく。
* WebAPI方式を利用できるようにMInt運用チームに設定を依頼する。

    + ホスト情報と使用コマンド情報をMIntシステムのWebAPIに事前登録する。

環境設定
^^^^^^^^^^^^^^^^

利用申請を行うと、実行に必要な環境構築方法や資材の入手方法のマニュアルが返送されるので、それを使用して環境構築および資材を入手、展開、実行準備を行っておく。

ポーリングの開始
^^^^^^^^^^^^^^^^^

認証情報と共にポーリングプログラムを動作させておく。
事前に設定した情報に従ってMIntシステム側と通信し、入力ファイルの受信、計算、出力ファイルの送信が自動的に行われる。
認証情報が無い、間違っている、などの場合は>ポーリングは失敗し、計算は行われない。
また **ワークフローを実行したユーザーと同じユーザーのトークンまたはログイン方式での同じユーザー** で実行しないとこちらもポーリングは失敗し、計算は行われない。

1. 以下2. または3. のどちからの方法で、**mi-system-remote.py** を実行する。
2. トークン指定方式

  .. code::
            
     $ cd <展開した場所>/misrc_distributed_computing_assist_remote_side
     $ python mi-system-remote.py <ホスト情報> https://nims.mintsys.jp <API token> port:443 no_auth:/home/misystem/nims_proxy.cer calc_base:/home/misystem/remote_calculation
     site id = <ホスト情報> で指定した識別子
     base url = https://nims.mintsys.jp:443

3. ログイン方式

  .. code::
               
     $ cd <展開した場所>/misrc_distributed_computing_assist_remote_side
     $ python mi-system-remote.py <ホスト情報> https://nims.mintsys.jp login port:443 no_auth:/home/misystem/nims_proxy.cer calc_base:/home/misystem/remote_calculation
     site id = <ホスト情報> で指定した識別子
     base url = https://nims.mintsys.jp:443
     nims.mintsys.jp へのログイン
     ログインID: <MIntシステムのログイン名>
     パスワード: <同、パスワード>
      token = <ログイン名のトークンの表示>
     ...
     
.. note::
   no_authパラメータでNIMSの用意した認証局ファイルを指定する必要がある。またportパラメータで443を指定する必要がある。

.. note::
         ホスト情報とAPI token は\ :numref:`get_authorizaion_infomation`\ の\ :ref:`get_authorizaion_infomation` で入手したそれぞれの認証情報を指定する。

.. note::
         通常は50443ポートを利用して行われるが、ポリシーによって使用不可能な場合はコマンドラインにport:443とすることで443ポートでの通信も可能となる。

ワークフローの実行
------------------

DPFに専用のアカウント作った場合は専用のワークフローとなるので、利用可能になると専用のIDが送付される。実行はそのIDで実行する。
そうでない場合はID、W000110000000724のワークフローを使用する。

ワークフロー実行中
^^^^^^^^^^^^^^^^^^^

実行中のワークフローを :numref:`dpfc_frontistr_running_workflow` に示す。

.. figure:: ../figures/dpfc_frontistr/running_workflow.png
   :align: center
   :scale: 70%
   :name: dpfc_frontistr_running_workflow

   実行中のワークフローのイメージ

* 灰色になっているのが実行終了したモジュール
* 赤色になっているのが実行中のモジュール
* 黄色いのは未実行のモジュール(この例では全モジュールが実行済みか実行中なので無い）

.. raw:: latex

   \newpage
