====
概要
====

MIシステムから任意のモジュールの計算をMIシステム外の計算機(これを外部計算機資源と言う)を使用してワークフローを実行することを外部計算機資源の有効活用としてSIP1期の検証項目として実装し動作検証を行った。
本システムはこの検証を踏まえ、より簡易に実装が可能なシステムを構築した。

* NIMS DMZに配置したMIntシステムを対象とする。
    + SSH等で外部の計算機を計算資源として計算を行う
    + 専用APIシステムを構築してSSH接続が不可能な外部の計算機を計算資源として計算を行う
* 外部計算機資源においての秘匿データなどの扱い
    + 秘匿データの指定は簡易な方法
    + MIntシステム側からはその存在は感知できない

本ドキュメントは外部計算機資源の有効活用について、動作原理などを説明し、次いで簡単にインストール、実行する方法を説明する。
インストール、実行はMIntシステム側と外部計算機資源側に分かれている。

扱う方式
========

本書で扱う外部計算機資源の有効化強うの方法は以下の２つの形式である。

* sshなどでMIシステムの任意のモジュールから直接遠隔計算を実行する。
* WEBAPIを利用してMIシステムの任意のモジュールからポーリング形式で遠隔計算を実行させる。

使用するリポジトリ
==================

外部計算機資源の有効利用のために、以下２つのリポジトリを用意していある。

* misrc_remote_workflow
    + 主に外部計算機資源側で実行されるスクリプトのサンプルが登録されている。
* misrc_distributed_computing_assist.api
    + API方式のためのシステム構築用のプログラム、サンプルが登録されている。
    + API本体は直下に
    + ワークフローで使用するプログラムは```debug/mi-system-side```に
    + 外部計算機側で使用するプログラムは```debug/remote-side```に
        - ここから実行されるプログラムのサンプルは上記misrc_remote_workflowリポジトリを使用している。

============================================================
外部計算機資源をMIntシステムから有効に活用するための手法とは
============================================================

最初に各手法の動作原理を説明する。

SSHを利用した遠隔実行
=====================

最初にsshを利用して、MIシステムの任意のモジュールから外部計算機資源を利用する方法を説明する。

概要
-----

sshを利用した遠隔実行とは、sshプロトコルを利用してネット上でアクセス可能な場所にある計算機をあたかもMIntシステムの計算機の一部として使用すること言う。
この場合sshパケットが到達可能な場所であればどこでも対象となり得る。
sshアクセスではパスワードなしでの運用も可能であり、本システムも基本的にパスワードなし接続での運用が前提であるが、必ずしも必須ではない。
スクリプト内で実現可能であればパスフレーズ付きなど多彩なアクセス方法を採用可能である。

.. mermaid::
   :caption: SSH実行のイメージ
   :align: center

   graph LR;

   subgraph NIMS所外
     input3[\秘匿データ/]
     module21[専用プログラム実行]
     module22[データ返却]
   end
   subgraph MIntシステム
     subgraph ワークフロー
       input1[\入力/]
       module11[ssh実行開始]
       module12[sshデータ受け取り]
       module13[計算]
       output1[/出力\]
     end
   end

   input1-->module11
   module11-->module12
   module12-->module13
   module13-->output1
   input3-->module21
   module11--ssh経由-->module21
   module21-->module22
   module22--ssh経由-->module12

実行のイメージ
-------------------------------

この方式では、以下のようなシステムで動作サンプルが用意されている。

.. figure:: images/remote_execution_image.eps
  :scale: 70%
  :align: center

.. raw:: html

   <A HREF="_images/remote_execution_image.png"><img src="_images/remote_execution_image.png" /></A>

  遠隔実行のイメージ

このようにして、特定のモジュール（Abaqus2017）と特定の計算ノード（計算ノード２）を用意し、計算ノード２がMIシステム外にある計算機を遠隔実行できるように設定して、使用することでMIシステム外の計算機または計算機群をMIシステム内にあるかのごとく計算（ワークフロー）を実行することが可能になる。またAbaqus2017と謳ってはいるが実行するプログラムはこれに限らず、様々なコマンド、プログラム、アプリケーションを実行することが可能なように作られている。

.. raw:: latex

    \newpage

システム要件
-----------------

* MIntシステム側。
    + 遠隔実行専用の計算ノードを設置してある。
    + 遠隔実行用予測モジュールを作成。
    + このモジュールは専用計算ノードを指定して計算を行うよう設計。
    + モジュールおよび専用計算ノードにssh操作の設定。
* MIntシステム外（主に要件）
    + 外部から到達可能な場所。
    + 可能ならLinux（Macでも可能。Windowsはssh到達に問題があるため非推奨）。
    + 必要な資材を取得、展開。
    + 必要な情報を設定（主にソルバーパス、パラメータ、秘匿データの配置）

MInt側詳細
-------------

専用計算ノードでは以下のような動作が行われるように、専用モジュールが定義するプログラムを実行する。

必要な資材はgitlabに登録してある。

* パラメータ類の遠隔計算機へ送信（遠隔計算機側にあるパラメータまたはファイルを指定することも可）。
* 遠隔計算機でソルバー（プログラム）の実行。
* 実行が終了したら結果ファイルの取得。

外部計算機資源の詳細
---------------------

外部計算機資源側計算機では、必要なファイルの配置が主な手順である。

必要な資材はgithubに登録してある。

* 資材の展開
* ソルバーパスの調整
* 秘匿データ（ある場合）に指定のディレクトリへの配置

用意されているサンプルワークフロー
----------------------------------

この方式ではサンプルとして下記のようなイメージの動作検証環境用ワークフローを用意した。

.. figure:: images/workflow_with_sshmodule.png
  :scale: 80%
  :align: center

  動作検証用のワークフロー

※赤枠の部分が遠隔実行が行われるモジュールである。

.. raw:: latex

   \newpage

外部計算機でのディレクトリ
--------------------------

外部計算機のディレクトリ構造は以下のようになっている。インストール方法については後述する。

* ユーザーディレクトリ

.. code-block:: none
  
  ~/ユーザーディレクトリ
    + remote_workflow
      + scripts
        + input_data

コマンドの流れ
--------------

サンプルワークフローの該当モジュールから外部計算機のコマンドが実行されるまでの流れを下記に示す。

.. mermaid::
   :caption: SSH接続経由によるコマンド実行の流れ
   :align: center

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as プログラム（Ｂ）
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : NIMS機構内
     Note over D,E : 外部計算機資源内

     A->>B:モジュールが実行
     B->>C:（Ａ）が実行
     C->>D:（Ｂ）がssh経由で外部計算機の（Ｃ）を実行
     D->>E:（Ｃ）が実行


* プログラム（Ａ）: kousoku_abaqus_ssh_version2.sh
    + MIntシステムの予測モジュールが実行する。
    + 予測モジュール定形の処理などを行い、（Ｂ）を実行する。
    + サンプル専用。
* プログラム（Ｂ）: execute_remote_command.sample.sh
    + （Ａ）から実行された後、外部計算機実行のための準備を行い、ssh経由で（Ｃ）を実行する。
    + サンプル専用。
    + 送信するファイルはパラメータとして記述
    + 受信するファイルは外部計算機資源上の計算用ディレクトリ [#calc_dir1]_ のファイル全部。
* プログラム（Ｃ）: execute_remote-side_program_ssh.sh
    + （Ｂ）からsshで実行される。
    + 実行されるプログラムは外部計算機側で任意のものが指定可能。
    + インストール時はexecute_remote-side_program_ssh.sample.sh [#sample_name1]_ となっている。
* プログラム（Ｄ）: remote-side_scripts
    + （Ｄ）から実行されるようになっており、いくつかのスクリプトを実行するよう構成されている。
    + サンプル専用であり、必ず使うものではない。（Ｃ）に依存する。


.. [#calc_dir1] 外部計算機では計算は/tmpなどに一時的なディレクトリを作成し計算が実行される。
.. [#sample_name1] 本システムでは、MIntシステムは「execute_remote_command.sample.sh」を実行し、外部計算機で実行を行うプログラムとして「execute_remote-side_program_ssh.sh」を呼び出す。外部計算機側ではインストール後にこのファイル（インストール直後は、execute_remote_program_ssh.sample.shと言う名前）を必要に応じて編集して使用することで、別なコマンドを記述することが可能になっている。

MIntシステムと送受信されるデータ
------------------------------

MIntシステムへ送受信されるデータは、「execute_remote_command.sample.sh」で決まっており、以下の通り。

* 送信されるデータ
  + 「execute_remote_command.sample.sh」にパラメータとして記述したファイル。（モジュール内）
* 返信されるデータ
  + 計算結果としての出力ファイル。
    - 計算専用ディレクトリを作成して計算され、そのディレクトリ以下のファイルは全て
    - このディレクトリでの計算は、「execute_remote-side_program_ssh.sh」で行われるので、返信の必要の内ファイルはあらかじめこのスクリプト終了前に削除しておく。

※ 秘匿データを配置してあるディレクトリまたはインストール後のセットアップで実行に必要なファイル、データとして指定されたものはMIntシステムで感知できないこと、およびシステム的に記録（GPDBなど）するための設定がなされていないため送り返されることは無い。

.. raw:: latex

    \newpage

APIを利用したポーリング方式
============================

続いてはAPI(MIntシステムのAPIではない)を利用したポーリング方式による方式の説明である。sshなどで直接通信が行えない組織間でもhttpまたはhttpsでの通信は可能なことが多く、これを利用することで外部計算資源の有効活用できることを狙った。

概要
----

APIを利用したポーリングシステムとは外部計算資源をsshなどで直接操作するのではなく、中間に計算を仲介するAPIを立て、MIntシステム側、外部計算資源側がそのAPIを利用してhttpまたはhttps通信で計算の依頼、実行などを行うシステムである。
この場合、外部計算資源側、MIntシステム側（予測モジュール）は計算工程の随所で定期的に通信する必要がある（ポーリング）ので、ポーリングシステムと言う。
sshの場合と比べて外部計算資源の利用および実行のための手続きが多くなり、用意するプログラムも複雑になる。

.. raw:: latex

    \newpage

実行のイメージ
---------------

この方式では以下のようなシステムを想定している。 

.. figure:: images/remote_execution_image_api.eps
  :scale: 70%
  :align: center

.. raw:: html

   <A HREF="_images/remote_execution_image_api.png"><img src="_images/remote_execution_image_api.png" /></A>

  APIを利用した外部計算資源の利用イメージ

.. raw:: latex

    \newpage

ポーリングシステムの流れ
----------------------------

この方式でのポーリングシステムのフロー概要。

.. mermaid::
   :caption: ポーリングシステムの流れ
   :align: center

   sequenceDiagram;

   participant A as MIシステム<BR>（NIMS内）
   participant B as WebAPI<BR>(NIMS内)
   participant C as ポーリングシステム<BR>（ユーザー側）
   participant D as ユーザープログラム<BR>（ユーザー側）


   C->>B:リクエスト
     alt 計算が存在しない
       B->>C:ありません
       C -->> C:リクエスト継続
     else 計算が存在する
       A->>B:計算要求
       C->>B:リクエスト
       B->>C:あります
       C->>B:情報取得リクエスト
       alt 計算実行
         B->>C:パラメータ送付、コマンドライン送付
         C->>D:プログラム実行
         alt プログラム実行
           D -->> D:プログラム実行中
         else プログラム終了
           D -->> C:プログラム終了
         end
         C->>B:計算終了通知
       else no seq
       end
       B->>C:計算結果の返却要求
       C->>B:計算結果の返却応答
       B->>A:ジョブの終了要求
     end

.. raw:: latex

    \newpage

システム要件
---------------

この方式における必要な条件を記す。おもに外部計算資源側の条件となる。

* 双方で設定必要な事項
   + 実行可能な計算またはプログラム
   + 送受信するファイル
   + この情報をAPIがワークフローから遠隔計算機へ、遠隔計算機からワークフローへと受け渡す。
       - 遠隔計算機へはコマンドとパラメータ
       - ワークフローへは計算結果などのファイル
* MIntシステム側
   + 外部計算資源有効利用用の計算ノードを設置してある。(以下専用計算機または専用ノードとする）
   + 外部計算資源有効利用モジュールを作成
   + このモジュールは専用計算機を指定して計算を行うよう実装する。
   + ポーリング用APIを実行する。MIntシステムへ到達可能ならどこでもよい。
   + このAPIプログラムはモジュールごとに専用の設定を必要とする。
   + このモジュールはこのAPIとだけ通信する。
* MIntシステム外（外部計算資源側）
   + NIMS所外にあって、httpsで本APIへ到達可能なネットワーク設定の場所にあること。
   + 本APIと計算を行うためのポーリングプログラムのサンプルをpythonで用意した。
       - ほとんどの場合このサンプルプログラムで事足りる。
   + 用意する計算機はLinuxが望ましいが、サンプルを利用する場合pythonが実行可能なPCなら何でもよい。
   + 必要な資材を取得、展開。
   + 資材をローカライズ（プログラム等を環境に合わせて編集）

用意されているサンプルワークフロー
----------------------------------

下記イメージの動作検証用サンプルワークフローを用意してある。

.. figure:: images/workflow_with_apimodule.png
   :scale: 100%
   :align: center

   検証用ワークフロー

※赤枠の部分が外部計算機資源を利用するモジュールである。

.. raw:: latex

    \newpage

MIntシステムでのディレクトリ
---------------------------

MIntシステム側のディレクトリ構造は以下のようになっている。

* ユーザーディレクトリ

.. code-block:: none

   ~/misystemディレクトリ
    + remote_workflow
      + scripts
    + misrc_distributed_computing_assist_api
      + debug
        + mi-system-side
     
* ワーキングディレクトリ
    + 複雑なので省略する。

外部計算資源でのディレクトリ
----------------------------

外部計算資源のディレクトリ構造は以下のようになっている。インストール方法については後述する。

* ユーザーディレクトリ

.. code-block:: none
  
  ~/ユーザーディレクトリ
    + remote_workflow
      + scripts
        + input_data
    + misrc_distributed_computing_assist_api
      + debug
        + remote-side

* ワーキングディレクトリ

.. code-block:: none

  /tmp/<uuid>


外部計算機でMIntシステムから実行されるプログラム
------------------------------------------------

.. mermaid::
   :caption: ポーリング方式でのコマンドの流れ
   :align: center

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as API
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : NIMS機構内
     Note over D,E : 外部計算機資源内

     A->>B:モジュールが実行
     B->>C:（Ａ）がhttps経由で実行
     D->>C:（Ｃ）がhttps経由で実行
     D->>E:（Ｃ）が実行

本システムでは、MIntシステムのAPIに設定したプログラムを外部計算機での実行に使用する。
サンプルワークフローでは、「execute_remote-side_program_api.sh」となっている。
外部計算機側ではインストール後にこのファイル（インストール直後は、execute_remote_program_api.sample.shと言う名前）を必要に応じて編集して使用する。

MIntシステムで送受信されるデータ
------------------------------

MIntシステムで送受信されるデータは、MIntシステム側のAPIと通信するモジュールの実行ファイルであらかじめ決め置く。APIにはその情報によって外部計算資源とデータのやりとりをする。
この情報に必要なファイルのみ設定することで、それ以外のファイルの存在をMIntシステム側で感知できず、したがって不要なファイルのやりとりは発生せず、秘匿データなどの保護が可能となる。

========
使用方法
========

インストールおよびプログラムの準備など説明する。SSH方式、API方式のそれぞれの準備から実行までを記述する。

本システムの利用者はMIntシステムのアカウントは既に発行済であるものとし、その手順は記載しない。

手順は以下のようになっている。

* 事前に決めておくこと
* 事前準備
* MIntシステム側の準備
* 外部計算機側の準備
* ワークフローの準備

事前決定事項
========

事前に準備する項目は以下の通り。

* 実行するプログラム
    + 事前に外部計算資源側で実行するプログラム及び必要なパラメータの調査を行う。
* SSHの場合
    + sshログインのための情報（鍵暗号方式によるパスワードなし接続が望ましい）
    + misrc_remote_workflowリポジトリの展開
* APIの場合
    + API方式の場合は不特定多数の利用者とAPIプログラムを共有するので、利用可能なコマンドはAPIに事前登録しておく必要がある。
    + misrc_remote_workflowリポジトリとmisrc_distributed_computing_assist_apiリポジトリの展開

SSH方式
=======


事前準備
--------

MIntシステム側
--------------

外部計算機資源側
-----------------

ワークフローの準備
------------------

API方式
=======

MIntシステム側
--------------

外部計算機資源側
-----------------

ワークフローの準備
------------------

秘匿データの扱い
====================

===============================
API形式を独自実装するための情報
===============================

共通
====

リソース
========

MIntシステム用
--------------

外部計算資源用
--------------

設定
====

エラー情報
==========

以上




















