========
はじめに
========

MIntには、ワークフローを構成するモジュール内の一部分の処理を、MIntの計算ノード以外の「外部計算機」に行わせる機能がある。本機能によって、ユーザには下記に挙げる利点がある。

* 秘匿プログラムの使用
* 秘匿データの使用
* 特殊構成 (MIntの計算ノードでは対応できない) の計算機を使用できる
* 商用ソフトの使用 (MIntの計算ノードにも商用ソフトがインストールされているが、ライセンスの規定上、ほとんどの場合NIMS外からは利用できない)

外部計算資源の利用に際しては、MInt、外部計算機の双方が後述のセキュリティ水準を満たす必要がある。

1. MIコンソーシアム会則（秘密保持誓約書含む）、MIntシステム利用規定など、MInt利用に関わる契約・規定を遵守すること。
2. MInt側は、下記のセキュリティ対策を実施すること。

    * 第三者によるMIntのセキュリティ分析・セキュリティリスク診断を実施し、リスクを避ける設計を維持すること。
    * MIntを構成するサーバのOS・ミドルウェア・ライブラリ等に対し、継続的に脆弱性データベースを確認し、必要なアップデートを実施すること。
    * 不正アクセス監視やネットワーク負荷監視を実施すること。
3. 外部計算機側は、外部計算機として利用されるコンピュータに対し、十分なセキュリティ対策を実施すること。継続的に利用する場合には、定期的に対策状況を確認し、セキュリティレベルを維持すること。

外部計算資源利用には、SSH方式とWebAPI方式がある。
前者はMIntから外部計算機へSSHで必要なデータとコマンドをプッシュする方式である。
単純で、外部計算を遅延なく開始できる利点があるが、外部計算機側でMIntに対しSSHのポートを開放してプッシュを受け入れる必要がある点は、特に企業ユーザではハードルが高いことが想定される。
これに対し、後者は数分間隔で外部計算機側からMIntにWebAPI(https)でポーリングし、処理すべき案件が存在した場合は、必要なデータとコマンドがプルされる方式である。
この方式では外部計算機側にポート開放の必要が無いが、外部計算の開始までにポーリング間隔に相当する遅延が生じる。

本機能は外部計算機内にユーザが持つ秘匿データの扱いにも十分な配慮が行われている。
まず、ユーザが持つ秘匿データに関して、MIntが収集する情報はワークフローの各モジュールの入出力ポートの情報のみであり、モジュールの内部で完結する本機能のために、モジュールと外部計算機の間で送受信される情報は収集対象外である。
外部計算機側は、MIntにあらかじめ定められたコマンドのみ実行できるように設定することができる。
また、MIntに処理結果を返送する前に不必要なデータをワーキングディレクトリから削除することができる。

上記の機構によって、安全な外部計算が保証される。下記の各章で具体的な利用方法について記す。
また、外部計算資源の利用に際して本書では不明な点は、ユーザとMInt運用チームとの協議で決定するものとする。

本書の対象
============

対象読者
---------

本文書は既にMIntシステムのユーザーであり、これから外部計算資源を利用したワークフローの実行を行おうとしている方(以下利用者とする）を想定して記述しています。

対象読者は以下の知識を有しているか、知識を有している担当者が存在していることを前提としています。

* Linux(主にCentOS 7.x)の仕組みやコマンドについての基本的な知識
* オープンソースソフトウェアを扱う、基本的な知識
* MIntシステムのワークフローの操作、ランの実行などの基本的な知識

対象範囲
---------

本文書ではこれから外部計算機資源を利用した既存のワークフローの実行を行うための情報を元に記述されている。MIntシステムに存在しない外部計算機資源を利用することを想定した予測モジュールやワークフローの新規作成に関する情報は記述しない。また外部計算機資源として利用者が用意する計算機(以下外部計算機と言う)で動作するプログラムはNIMS側での動作実績のあるものを対象とし、新規作成した上で外部計算機資源として利用する場合の情報も記述しない。（注：これはら別途「」に記述する。）

この他、外部計算機に展開する予測モジュール用の資材の詳細についてはその予測モジュールまたはワークフローの利用者マニュアルを参照することとし、本書では扱わない。


.. raw:: latex

    \newpage

====
概要
====

利用イメージ
============

外部計算資源の利用イメージを( :numref:`image_for_use_eps` )に示す。

* MIntはNIMS構内のDMZ [#whatisDMZ]_ に存在する。
* ユーザはMInt上に、外部計算を利用するモジュールを含んだワークフローを持つ。当該モジュールやワークフローの参照・実行権限は自機関内などに限定できる。
* ユーザが当該ワークフローを実行すると、外部計算を利用するモジュールで一部の処理が外部計算機に受け渡される。
* 外部計算機は処理の過程で、MIntに置けないデータやプログラムにアクセスできる。これらのアクセスを外部計算機の内部で完結させることで、安全な利用が可能となる。

.. raw:: html

   <A HREF="_images/remote_execution_image.png"><img src="_images/remote_execution_image.png" /></A>

  外部計算資源の利用イメージ
  
.. figure:: images/image_for_use.eps
  :scale: 60%
  :align: center
  :name: image_for_use_eps

  外部計算資源の利用イメージ

.. raw:: latex

    \newpage

.. [#whatisDMZ] 物理的にはNIMS構内のサーバ室に存在するが、ネットワーク的には機構内LANとインターネットの双方からファイアウォールで切り離された領域。

SSH方式とWebAPI方式の比較
=======================

* SSH方式
    + MIntからSSHで外部計算機にアクセスし、必要なファイルとコマンドをプッシュし、コマンドを発行し、結果を得る。
    + ファイルは内部でrsync -avを利用して送受信され、サイズは無制限である。
    + コマンドラインなどの文字列はBase64エンコード無しで送受信される。
    + 外部計算機側SSHサーバのポート(TCP/22以外でも可)のインバウンドアクセスの開放が必要である。
    + 通信障害には弱い。計算中などで通信が切れると復帰できず、本バージョンでは実行プロセスが簡易なため計算続行が不可能である。
* WebAPI方式
    + 外部計算機からMIntのWebAPIサーバにポーリングを行い、要処理案件の有無を確認する。ポーリング間隔は数分程度を想定している。案件があれば必要なデータとコマンドをプルし、自らコマンドを実行し、APIで結果を送信する。
    + ファイルはBase64エンコードされ、サイズはエンコード後に2GiB [#whatisGiB]_ 未満である必要がある。
    + コマンドラインなどの文字列はBase64エンコード無しで送受信される。
    + MIntのWebAPIサーバへのhttps(TCP/50443)のアウトバウンドアクセスの許可が必要である。
    + サーバー側クライアント側で状態を保持しているため、通信障害が起きても再接続と計算続行が可能である。

.. [#whatisGiB] GiB はギビバイトといい、コンピュータの容量や記憶装置の大きさを表す情報単位の一つである。1GiB は 2の30乗バイトであり、1,073,741,824Bである。

.. raw:: latex

    \newpage

========
動作原理
========

SSH方式
=======

動作イメージ
------------

SSH 方式での外部資源利用のイメージを( :numref:`ssh_project_create_flow` )に示す。

.. _ssh_project_create_flow:

.. mermaid::
   :caption: SSH方式の外部資源利用のイメージ
   :align: center

   graph LR;

   subgraph NIMS所外
     input3[\秘匿データ/]
     module21[専用プログラム実行]
     module22[データ返却]
   end
   subgraph MInt
     subgraph ワークフロー
       input1[\入力/]
       module11[SSH実行開始]
       module12[SSHデータ受け取り]
       module13[計算]
       output1[/出力\]
     end
   end

   input1-->module11
   module11-->module12
   module12-->module13
   module13-->output1
   input3-->module21
   module11--SSH経由-->module21
   module21-->module22
   module22--SSH経由-->module12

.. raw:: latex

    \newpage

ワークフロー例
--------------

SSH方式の外部資源利用を含むワークフローを、MIntのワークフローデザイナで表示した例を示す。
赤枠の部分が遠隔実行の行われるモジュールである。
なお、本ワークフローは動作検証用サンプルとして、:numref:`how_to_use`\ の\ :ref:`how_to_use` で説明するインストール資材に含まれている。

.. figure:: images/workflow_with_sshmodule.png
  :scale: 80%
  :align: center

  動作検証用のワークフロー

.. raw:: latex

    \newpage

モジュール内の処理
------------------

外部資源利用を行うモジュール内で、外部計算機側の処理が実行されるまでの流れを下記に示す。

.. mermaid::
   :caption: SSH接続経由によるコマンド実行の流れ
   :align: center

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as プログラム（Ｂ）
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : MInt内
     Note over D,E : 外部計算機内

     A->>B:モジュールが実行
     B->>C:（Ａ）が実行
     C->>D:（Ｂ）がSSH経由で外部計算機の（Ｃ）を実行
     D->>E:（Ｃ）が実行

* モジュール

    + MIntのワークフローシステムによって実行されるモジュール
    + プログラム（Ａ）を実行する
* プログラム（Ａ）

    + モジュールによって実行されるプログラム
    + モジュール固有の前処理を行う。
    + モジュールごとに任意の名前で用意する。
    + :numref:`how_to_use`\ の\ :ref:`how_to_use` で説明する編集を行う。
    + （Ｂ）を実行する。
* プログラム（Ｂ） このプログラムが外部計算機と通信を行う。

    + 外部計算の準備を行う。
    + 名前は任意の名前を使用可能。
    + テンプレートは **execute_remote_command.sample.sh** をコピーして使用する。

        -  :numref:`how_to_use`\ の\ :ref:`how_to_use` で説明する編集を行う。
        - （Ａ）が実行するプログラム名とコピーしたプログラム名は同名としておく。
    + SSH経由で（Ｃ）を実行する。

        - 送信するファイルはパラメータとして記述する。
        - 外部計算機上の一時ディレクトリ [#calc_dir1]_ の内容を全部受信するため、MIntに送信しないデータは外部計算機側で（Ｃ）の実行終了前に削除する。
* プログラム（Ｃ）

    + 名前は プログラム（Ｂ）用のテンプレートで**execute_remote-side_program_ssh.sh** となっているが変更可能である。
    
        - 同名のテンプレートが用意されているので、複雑な処理を必要とする場合は、コピーして使用する。
        - （Ｂ）で実行されるプログラム名とコピーしたプログラム名は同名としておく。
* プログラム（Ｄ）

    + 外部計算機上のプログラムを（Ｃ）のみで完結させ、本スクリプト群は用意しない運用も可能である。

.. [#calc_dir1] 外部計算機では、処理は/tmpなどに作成した一時ディレクトリで実行される。
.. [#sample_name1] 本システムでは、MIntは **execute_remote_command.sample.sh** を実行し、外部計算機で実行するプログラムとして **execute_remote-side_program_ssh.sh** を呼び出す。外部計算機側ではインストール後にこのファイル（インストール直後は、execute_remote_program_ssh.sample.shと言う名前）を必要に応じて編集して使用することで、別なコマンドを記述することが可能になっている。

.. raw:: latex

    \newpage

WebAPI方式
==========

動作イメージ
------------

WebAPI方式での外部計算の実行イメージを( :numref:`WebAPI方式の流れ` )に示す。

.. _WebAPI方式の流れ:

.. mermaid::
   :caption: WebAPI方式の流れ
   :align: center

   sequenceDiagram;

   participant A as MInt<BR>
   participant B as MInt WebAPIサーバ<BR>
   participant C as WebAPI方式<BR>（外部計算機側）
   participant D as ユーザープログラム<BR>（外部計算機側）


   C->>B:リクエスト
     alt 計算が存在しない
       B->>C:ありません
       C -->> C:リクエスト継続
     else 計算が存在する
       A->>B:計算要求
       C->>B:リクエスト
       B->>C:存在する
       C->>B:情報取得リクエスト
       alt 計算実行
         B->>C:パラメータ送付、コマンドライン送付
         C->>D:プログラム実行
         alt プログラム実行
           D -->> D:プログラム実行中
         else プログラム終了
           D -->> C:プログラム終了
         end
         C->>B:計算終了通知
       else no seq
       end
       B->>C:計算結果の返却要求
       C->>B:計算結果の返却応答
       B->>A:ジョブの終了要求
     end

.. raw:: latex

    \newpage

ワークフロー例
--------------

WebAPI方式の外部資源利用を含むワークフローを、MIntのワークフローデザイナで表示した例を示す。
赤枠の部分が遠隔実行の行われるモジュールである。
なお、本ワークフローは動作検証用サンプルとして、:numref:`how_to_use`\ の\ :ref:`how_to_use` で説明するインストール資材に含まれている。

.. figure:: images/workflow_with_apimodule.png
   :scale: 100%
   :align: center

   検証用ワークフロー

※赤枠の部分が外部計算資源を利用するモジュールである。

.. raw:: latex

    \newpage

モジュール内の処理
------------------

ワークフローの当該モジュール内で外部計算機側の処理が実行されるまでの流れを下記に示す。

.. mermaid::
   :caption: WebAPI方式でのコマンドの流れ
   :align: center

   sequenceDiagram;

     participant A as モジュール
     participant B as プログラム（Ａ）
     participant C as WebAPI
     participant D as プログラム（Ｃ）
     participant E as プログラム（Ｄ）

     Note over A,C : MInt内
     Note over D,E : 外部計算機内

     A->>B:モジュールが実行
     B->>C:（Ａ）がhttps経由でAPI発行
     D->>C:（Ｃ）がhttps経由でAPI発行
     D->>E:（Ｃ）が実行

* モジュール

    + MIntのワークフローシステムによって実行されるモジュール
    + プログラム（Ａ）を実行する
* プログラム（Ａ）

    + モジュールによって実行されるプログラム。モジュールごとに任意の名前で用意する。
    + モジュール固有の前処理を行う。
    + **misrc_distributed_computing_assist_api/debug/mi-system-side/mi-system-wf.py** を実行しておく。
      - WebAPIへ計算の情報が登録される。
      - 以降このプログラムが外部計算機資源側（以下の（Ｃ）とAPIを介して計算を行う）
* WebAPI (このプログラムがMIntシステムと外部計算機との通信を中継する。)

    + 外部計算の準備を行う。
        - 送受信するファイルはパラメータとしてあらかじめ設定しておく。
    + WebAPI経由で（Ｃ）からのアクセスを受け付ける
    + （Ａ）から計算の情報登録が無い限り、（Ｃ）からアクセスがあっても計算は始まらない。
    + ワークフローを実行したユーザーのトークンと（Ｃ）からのトークンが合致しないと（Ｃ）は適正な通信相手とならない。
* プログラム（Ｃ）

    + ポーリングプログラムである。
    + **misrc_distributed_computing_assist_api/debug/remote-side/mi-system-remote.py** を実行しておく。
    + 外部計算機上で実行するプログラム名は、このプログラム経由でMIntシステムから受信され、このプログラムが実行する。
    + 認証情報はこのプログラム（Ｃ）が使用する。認証情報が無いとWebAPIにアクセスできない。詳細は\ :numref:`get_authorizaion_infomation`\ の\ :ref:`get_authorizaion_infomation` で説明する。
* プログラム（Ｄ）

    + （Ｃ）から実行される外部計算用スクリプト。
    + 名前は任意。（プログラム（Ｃ）経由で伝えられるため、あらかじめMIntシステム側に設定が必要）
    + **execute_remote_command_api.sh** を参考にして作成しておく。

.. _how_to_use:

=================
利用のための準備
=================

SSH方式、WebAPI方式それぞれのインストールおよびプログラムの実行までを外部計算機側で作業が必要な項目について説明する。
なお、外部計算機側はbashスクリプトとPythonスクリプトの動作するLinux計算機を推奨している。ただしMInt側との通信が正常に確立でき、外部計算に必要なプログラムが実行可能であれば、これ以外の環境でも構わない。
その場合、こちらに無い情報は利用者側で適宜用意して使うこととなる。
また、外部計算機側で秘匿データを扱う際は、これに関する仕様をMInt側に開示する必要は無い。

.. _before_descide_items:

事前確認
=========

事前に以下の点を確認しておく。

* SSH方式またはWebAPI方式の選択
* 外部計算機の設置場所

    + 自社内
    + NIMS内
    + AWSなどのクラウド

利用申請
=========

外部計算機資源を利用したワークフローの利用申請を行い、必要な認証情報の準備を行う。
このタイプのワークフローはユーザー専用となるため、その手続きが必要である。
申請後、専用ワークフローのワークフローIDが返送されるので、実行にはそのワークフローIDを利用する。

公開鍵の用意
-------------

SSH方式を選択した場合に必要になります。
SSH接続はMIntシステムから外部計算機に向けて行われます。
アクセスは公開鍵暗号方式を利用したパスワード無しログインで行われます。
公開鍵暗号はパスフレーズ無しの形式です。
MInt運用チームに依頼して、パスワードなしログイン用の公開鍵ファイルを入手し、以下の手順に沿ってファイルを作成しておきます。

  .. code::

     $ cd .ssh
     $ cat <入手した公開鍵暗号ファイル> >> authorized_keys
     $ chmod 600 authorized_keys

.. note::
   .sshディレクトリが無い場合は作成する。パーミッションも600としておく。

.. note::
   ワークフロー実行前にMInt運用チームに連絡してパスワードなしログインが可能なことを確認すること

APIトークンの用意
------------------

WebAPIを選択した場合、認証情報として利用するユーザーのAPIトークンと識別子が必要になります。

* APIトークンはMIntシステムログイン後、ユーザープロファイル管理システムのページで取得可能
* 識別子は文字通りユーザーを識別するもので、通常利用者の所属組織のアルファベット表記などです。

.. note::

  APIトークンと識別子はMIntシステム運用チームへもお知らせください。

環境構築
=========

外部計算機資源を利用した計算を行うMIntシステム外の計算機の環境構築について記述する。一般的に外部計算機資源を利用したいユーザーが構築する。手順は以下のとおり。

* OSの準備
* ソルバーの準備（必要であれば）
* pythonの準備
* gitの準備
* MIntシステム認証プログラム（WebAPIを選択し、APIトークンを利用しない場合）
* 予測モジュール用の資材の入手（個別の利用者マニュアルを参照）
* 外部計算機資源を利用するための資材の入手と展開

OSの準備
==================

OSはLinux系のOSが望ましいが、利用者側で用意でき、外部計算機資源の利用が可能なOSであればLinuxに限らない。ただしその場合は利用者側が本書を読んで必要な環境を用意するものとする。

.. _ready_public_keys:


ソルバーの準備
===============

利用したいワークフローによっては商用・非商用のソルバーが必要になる。商用の場合は利用者側でインストール、セットアップおよび動作確認を行うこととし、非商用の場合はMInt運用チームが構築スクリプトなどを提供する。

Pythonの準備
=============

利用するワークフローの予測モジュールはpythonで記述されたスクリプトであることがあり、これを外部計算機にインストールして利用する。
対応するバージョンは3.xであるため、用意したOSに使用可能か確認する。
インストールされていない場合別途インストールする。
WebAPIを選択した場合は必須となる。

バージョン確認
--------------

確認方法は以下のいずれかが表示されればインストールの必要はない。

.. code::

  $ python3
  Python 3.x.x ～

.. code::

  $ python --version
  Python 3.x.x ～

これ以外のバージョンが表示されない（コマンドが見つかりません or command not found）場合や、表示されても 2.x.x などと表示された場合はバージョン3.xのインストールが必要です。

※ python3.xの追加インストールの方法についてはOS個別となるため、利用者側のシステム管理者などにお尋ねください。

追加のパッケージ
-----------------

pip3.xコマンドを利用して以下のコマンドをインストールする。インストールはroot権限で行う。

* requests
* urllib3

gitの準備
=========

外部計算資源の利用に必要な資材は GitHub 上のリポジトリ [#whatisRepository]_ https://github.com/materialsintegration に用意されている。このれを取得するためにgitコマンドが必要となる。

確認方法
--------
git コマンドを実行してコマンドが見つかりません or command not foundなどになった場合は、gitコマンドを別途インストールします。

※ インストールの方法についてはOS個別となるため、利用者側のシステム管理者などにお尋ねください。

上記の例では以下の様な環境変数の設定が必要となります。

* MATHEMATICA11_2：Mathematicaのインストールディレクトリ（例えば、/opt/Wolfram/Mathematica/11.2/Executablesなど）
* BRITTLE_FRACTURE_HOME：上記<展開したい場所>で指定した場所をフルパスで指定します。（例えば/home/展開したい場所/misrc_brittle/facture_workflowとなる）
* QT_QPA_PLATFORM：offscreen を指定する。

外部計算機資源を利用するため資材
==================================

外部計算機に入手、展開の必要な資材は以下。

* WebAPI用ポーリングプログラム（WebAPI方式を選択した場合）
* MIntシステム認証プログラム（WebAPI方式の場合で、希望する場合のみ）
* SSH用利用者側実行スクリプト集（SSH方式の場合）

.. note::

   SSH方式を選択した場合はWebAPI方式のような特別な資材は必要ありません。

.. _api_polling_program:

WebAPI用ポーリングプログラム
-----------------------------

WebAPI方式を選択した場合に必要になります。手順は公開している場所から以下の要領でgitコマンドを使用してダウンロード、展開します。

* 手順

  .. code::

     $ cd <展開したい場所>
     $ git clone https://github.com/materialsintegration/misrc_distributed_computing_assist_remote_side.git

* 利用方法

  + proxyサーバーの設定が必要であれば、設定する。(https_proxy環境変数）
  + 外部計算機で、外部計算を行うユーザーで以下のコマンドを実行し、WebAPIのポーリング動作を実施します。

    .. code::
       
       $ cd <展開した場所>/misrc_distributed_computing_assist_remote_side
       $ python3 mi-system-remote.py <識別子> http://nims.mintsys.jp <APIトークン>

  + ポート番号はデフォルト50443を利用するが、これを利用できない場合通常のhttps通信用443を利用することができる。以下の様に実行する。

    .. code::
       
       $ cd <展開した場所>/misrc_distributed_computing_assist_remote_side
       $ python3 mi-system-remote.py <識別子> http://nims.mintsys.jp <APIトークン> port:443

* 動作確認

  + 正常動作時

    .. code::

       site id = 指定した識別子
       base url = https://nims.mintsys.jp:50443
        token = 指定したAPIトークン
       年/月/日 時:分:秒:send https://nims.mintsys.jp:50443/mi-distcomp-api/calc-request?site_id=指定した識別子
       code = 0300 / message = There is no information for accept_id(None), about the your site id(指定した識別子)

  + 異常な場合その１：識別子の間違い

    .. code::

       code = 400 / message = Your site-id(指定した識別子) does not match in the list that acceptable to.

  + 異常な場合その２：APIトークン間違い

    .. code::

       2022/01/19 17:33:56:status code = 403 / reason = {"errors":[{"code":"0005","message":"/mi-distcomp-api/calc-requestへの実行権がありません。"}]}

* 終了方法

  + CtrlキーとCキーを同時に押します。以下の様に表示され最大６０秒後に終了します。

    .. code::

       Ctrl + C スクリプト停止要求受付

.. note::

    この作業はWebAPI方式を選択した場合に必要です。

.. note::

    WebAPIを実行するユーザーでの作業となります。

MIntシステム認証プログラム
--------------------------

本資材はWebAPI方式を選択し、WebAPIポーリングプログラムをAPIトークンを利用せず、通常のログイン・パスワード方式で実行する場合に必要です。

.. note::

   この方式ですとコマンドラインにAPIトークンを記述する必要がなく、安全性もたかい使用法となります。インストールはroot権限で行います。必要な場合はMIntシステム運用チームまでご相談ください。


SSH用利用者側実行スクリプト集
------------------------------

SSH方式を選択した場合に必要になります。手順は公開している場所から以下の要領でgitコマンドを使用してダウンロード、展開します。

* 手順

  .. code::

     $ cd <展開したい場所>
     $ git clone https://github.com/materialsintegration/remote_workflow.git

.. [#whatisRepository] 本機能を実現する資材などを格納したサーバ。GitHubを利用しているが、アカウントが無くともダウンロードは可能である。MInt運用チームがアカウントを発行したユーザのみアップロードが可能である。

========
利用方法
========

SSH方式
=======

主に、外部計算機資源側の利用方法について記述する。

1. **misrc_remote_workflow** リポジトリを展開した場所の通知

    + この場所をMIntシステム運用チームへ知らせる。
2. 外部計算機側で実行するスクリプトがあれば **remote-side_scripts** に配置する。
3. MIntが外部計算機へログインして最初に実行するプログラム名は前述のとおり **execute_remote-side_program_ssh.sh** に固定されている。このため **execute_remote-side_program_ssh.sample.sh** をこの名前でコピーするか、新規に作成して、必要な手順をスクリプト化する。

.. note::
   SSH方式の場合は外部計算機において待機する必要のあるプログラムなどは無い。

(参考)MInt側作業
----------------

1. 外部計算資源を利用するモジュールが実行可能なスクリプト **misrc_remote_workflow/scripts/execute_remote_command.sample.sh** をコピーして専用スクリプトを作成する。
2. 予測モジュールのmodules/resouceRequest/pbsNodeGroupタグに ssh-node01 という値をセットする。
3. 予測モジュールのmodules/objectPathタグに1. で作成したスクリプトをセットする。
4. 1.で作成したスクリプトを各行のコメントに従い適宜修正する。
5. 1.を実行可能な予測モジュールを組み込んだワークフローを作成する。

.. note::
   :numref: `ready_public_keys` :ref: `ready_public_keys` で作成したキーを外部計算機資源側の想定されるユーザーに設定し、パスワードなしログインができることを確認しておく。

.. raw:: latex

   \newpage

WebAPI方式
==========

主に、外部計算機資源側の準備について記述する。

1. **misrc_distributed_computing_assist_api** リポジトリを展開する。
2. **authentication_operator** リポジトリを展開、環境変数を設定する。（ログイン方式を選択する場合）

.. note::
   環境変数AUTHENTICATION_OPERATORはログインシェルの自動設定ファイルに設定しておく。

3. 計算に必要なスクリプトの準備

   + 独自に実行ファイルを用意した場合はの情報はMInt運用チームに伝えておく。
   + 特別なリポジトリを利用する場合はこの作業が必要ないこともある。

実行
----

認証情報と共にポーリングプログラムを動作させておく。事前に設定した情報に従ってMIntシステム側と通信し、入力ファイルの受信、計算、出力ファイルの送信が自動的に行われる。認証情報が無い、間違っている、などの場合はポーリングは失敗し、計算は行われない。
また **ワークフローを実行したユーザーと同じユーザーのトークンまたはログイン方式での同じユーザー** で実行しないとこちらもポーリングは失敗し、計算は行われない。

1. :numref: `api_polling_program` :ref: `api_polling_program` の動作確認で実行したどちからの方法で、**mi-system-remote.py** を実行する。
2. 終了する場合はCtrl+Cで停止する。

    + ポーリング中の処理がある場合に備えてすぐには終了しない。
    + 処理中の情報が無ければ最大60秒で終了する。


(参考)MInt側作業
----------------

1. **misrc_distributed_computing_assist_api** リポジトリを展開する。
2. 構成ファイル **mi_distributed_computing_assist.ini** に必要な設定を行う。
3. **mi_dicomapi.py** を動作させて待ち受け状態にする。

  .. code::

     $ python mi_dicomapi.py

  または

  .. code::

     $ systemctl start distcomp_api

4. モジュールの実行プログラム内で、**misrc_distributed_computing_assist_api/debug/mi-system-side/mi-system-wf.py** を必要なパラメータとともに実行するように構成する。

.. note::
   ワークフロー側から計算登録時に構成ファイルは再読込されるので、WebAPIプログラムが現在動作中であっても読み込ませるための特別な動作は必要ない。

.. _sample:

外部計算機の作業場所
====================

SSH方式、WebAPI方式のどちらも計算場所はワーキングディレクトリ [#whatisworkingdirectory]_ と言い、UUIDで構成されたディレクトリ名のディレクトリの作成時間などで該当ディレクトリかどうか判断する。

.. [#whatisworkingdirectory] 外部計算機側のワーキングディレクトリは/tmpディレクトリに作成されるので、OSの設定に変更がなければ30日後に削除される。このため問題が発生した場合は発生から30日以内に調査を開始する必要がある。

その他MInt側注意事項
====================

SSH方式、WebAPI方式共通の注意事項など。

* pbsNodeGroup設定でssh-node01を設定する。他の計算機では外へアクセスすることができないため。
* pbsQueueなどCPU数などは指定できない。
* 外部計算機側で別途Torqueなどのバッチジョブシステムに依存する。

エラーが発生した場合
====================

ワークフローを本実行する前にMInt運用チームと連携して動作確認を行っておくが、予期せず異常終了した場合などは以下の方法で対策を検討することができる。

* SSH方式、WebAPI方式ともワークフローの出力ポートとは別に外部計算機で計算が行われた際の処理のログがある。MInt運用チームに連絡して、それを入手する。
* WebAPI方式であれば通信ログがポーリングプログラムの実行画面に出力されるのでこれを利用する。
* 同様に、外部計算機のワーキングディレクトリに計算結果およびログが残っているのでこれを利用する。

通信異常
--------

インターネット経由であるので、通信異常は発生するものとして対処してある。WebAPI方式では外部計算機側からの通信となるため、外部計算機側のプログラムでリトライ方式を採用している。デフォルトはリトライ間隔60秒のリトライ回数5回で通信失敗として終了する。この値は以下の書式で上書き指定することも可能である。

.. code::

     $ python mi-system-remote.py <ホスト情報> https://nims.mintsys.jp <API token> retry:<リトライ回数>,<リトライ間隔>

SSH方式ではその性質上処理中に通信異常が起きると復帰できない。現バージョンではSSH方式での処理中の通信異常を復帰させる手段は実装されていない。どちらの場合も通信が途絶えて処理続行不能と判断されれば、MIntシステム側に異常を通知し、異常終了となる ように構成されている。

.. note::
   リトライ回数は整数で指定し、リトライ間隔は整数または実数で指定する。

ワークフローの廃止
==================

ユーザがMInt運用チームにワークフローの廃止届を提出する。当該ワークフローはMInt上で「無効」のステータスを付与され参照・実行不能となる。

|　
|　　 
  
  
以上

